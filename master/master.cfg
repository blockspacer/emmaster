# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.trysched import Try_Userpass
from buildbot.changes import filter
from buildbot import locks
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Compile
from buildbot.process.properties import WithProperties
from buildbot.status.builder import SUCCESS, FAILURE, WARNINGS, SKIPPED
from buildbot.plugins import reporters
from buildbot.config import BuilderConfig
from buildbot.steps.transfer import FileUpload
from twisted.internet import defer
import StringIO, re

# The file secret.py contains the buildmaster local secret data that should not be committed to the repository.
# See secret.template.py on how to configure the file for initial use
from secret import *

c = BuildmasterConfig = {}

####### PROJECT IDENTITY

c['title'] = "Emscripten"
c['titleURL'] = "https://github.com/kripken/emscripten"
c['buildbotURL'] = buildmaster_public_url

####### WORKERS

c['workers'] = [worker.Worker("win-slave", buildslave_passwords["win-slave"]), worker.Worker("ubuntu-slave", buildslave_passwords["ubuntu-slave"]), worker.Worker("osx-slave", buildslave_passwords["osx-slave"])]
c['protocols'] = {'pb': {'port': buildmaster_slave_listen_port}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = [
    changes.GitPoller('git://github.com/kripken/emscripten.git', workdir='gitpoller-workdir', branches=['master', 'incoming'], pollinterval=300),
    changes.GitPoller('git://github.com/kripken/emscripten-fastcomp.git', workdir='gitpoller2-workdir', branches=['master', 'incoming'], pollinterval=300),
    changes.GitPoller('git://github.com/kripken/emscripten-fastcomp-clang.git', workdir='gitpoller3-workdir', branches=['master', 'incoming'], pollinterval=300)
]

all_repositories = {
    r'git://github.com/kripken/emscripten.git': 'emscripten',
    r'git://github.com/kripken/emscripten-fastcomp.git': 'llvm',
    r'git://github.com/kripken/emscripten-fastcomp-clang.git': 'clang'
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

c['schedulers'] = []

for branch, name in [
    ('master', 'master'),
    ('incoming', 'incoming'),
    ('incoming', 'tagbuilder')]:
	codebases = { 'emscripten': { 'repository': 'git://github.com/kripken/emscripten.git', 'branch': branch, 'revision': None },
                       'llvm': { 'repository': 'git://github.com/kripken/emscripten-fastcomp.git', 'branch': branch, 'revision': None },
                       'clang': { 'repository': 'git://github.com/kripken/emscripten-fastcomp-clang.git', 'branch': branch, 'revision': None } }

	builderNames = ["win-"+name, "osx-"+name, "ubuntu-"+name]
	c['schedulers'].append(SingleBranchScheduler(name="emcc-"+name, change_filter=filter.ChangeFilter(branch=branch), codebases=codebases, treeStableTimer=15, builderNames=builderNames))
	c['schedulers'].append(ForceScheduler(name="force-emcc-"+name, builderNames=builderNames, codebases=['emscripten', 'llvm', 'clang']))

builderNames = ["win-emsdk-updater", "osx-emsdk-updater", "ubuntu-emsdk-updater"]
c['schedulers'].append(ForceScheduler(name="force-emsdk-updater", builderNames=builderNames))

####### LOCKS

# Lock only one task to be running on each build slave at a time (by default multiple tasks of different type would run in parallel)
build_lock = locks.WorkerLock("slave_builds", maxCountForWorker = { 'osx-slave': 1, 'win-slave': 1, 'ubuntu-slave': 1 })

####### BUILDERS

class RunEmscriptenTestsWithSummary(ShellCommand):
    passed_re = re.compile('.*ok', re.DOTALL)
    skipping_re = re.compile('.*skipping.*', re.DOTALL)
    failed_re = re.compile('.*(error|fail|throw|invalid|broken).*', re.DOTALL)
    warnings_re = re.compile('.*warning.*', re.DOTALL)
    todos_re = re.compile('.*(todo|fixme).*', re.DOTALL)

    def __init__(self, **kwargs):
        ShellCommand.__init__(self, **kwargs)

    def createSummary(self, log):
        todos = []
        passed = []
        skipped = []
        failed = []
        warnings = []
        prevline = ''
        numPassed = numSkipped = numFailed = numWarnings = numTodos = 0

        sio = StringIO.StringIO(log.getText())
        for line in sio.readlines():
            l = line.lower()
            if l.startswith("ok") or l.startswith("error") or l.startswith("<skipping") or l.startswith("warning"):
                l = prevline + l

            if self.skipping_re.match(l):
                skipped.append(line)
                numSkipped += 1
            elif self.failed_re.match(l) and not l.startswith("emcc invocation:") and not l.startswith("test_failure_error_code"):
                failed.append(line)
                numFailed += 1
            elif self.passed_re.match(l):
                passed.append(line)
                numPassed += 1
            
            if self.todos_re.match(l):
                todos.append(line)
                numTodos += 1

            if self.warnings_re.match(l):
                warnings.append(line)
                numWarnings += 1

            prevline = l

        self.addCompleteLog('passed (%d)' % numPassed, "".join(passed))
        self.addCompleteLog('failed (%d)' % numFailed, "".join(failed))
        self.addCompleteLog('skipped (%d)' % numSkipped, "".join(skipped))
        self.addCompleteLog('todos (%d)' % numTodos, "".join(todos))
        self.addCompleteLog('warnings (%d)' % numWarnings, "".join(warnings))

c['builders'] = []

warningsDict = {0:SUCCESS}
for key in range(1, 100):
	warningsDict[key] = FAILURE

for bot in ['osx', 'ubuntu', 'win']:
	EXT = '.bat' if bot == 'win' else '.bash'

	# incoming and master branches:
	for branch in ['incoming', 'master']:
		slave_name = bot + '-' + branch
		run_env = { 'SLAVE_NAME': slave_name, 'TARGET_EMSCRIPTEN_BRANCH': branch }
		factory = BuildFactory()
		factory.addStep(ShellCommand(command=['acquire_exclusive_system_lock']))
		factory.addStep(ShellCommand(name='Update', description='update emslave', command=['update_emslave_and_emscripten' + EXT], env=run_env, haltOnFailure=True))
		factory.addStep(Git(repourl='git://github.com/kripken/emscripten.git', codebase='emscripten', workdir='emsdk/emscripten/' + branch, mode='incremental', branch=branch, haltOnFailure=True))
		factory.addStep(Git(repourl='git://github.com/kripken/emscripten-fastcomp.git', codebase='llvm', workdir='emsdk/clang/fastcomp/src/', mode='incremental', branch=branch, haltOnFailure=True))
		factory.addStep(Git(repourl='git://github.com/kripken/emscripten-fastcomp-clang.git', codebase='clang', workdir='emsdk/clang/fastcomp/src/tools/clang', mode='incremental', branch=branch, haltOnFailure=True))

		if branch == 'incoming':
			deploy_args = ['--deploy_llvm']
			if bot == 'ubuntu': deploy_args += ['--make_and_deploy_docs']
			if bot != 'osx': deploy_args += ['--deploy_emscripten', '--git_clean']
			factory.addStep(ShellCommand(command=['deploy_emscripten_llvm' + ('.bat' if bot == 'win' else '.py'), '--emsdk_dir', '.', '--cmake_config', 'RelWithDebInfo', '--delete_uploaded_files'] + deploy_args, workdir='emsdk/'))

		factory.addStep(RunEmscriptenTestsWithSummary(name='default suite', description='default suite', command=['run_default_suite' + EXT], env=run_env, workdir='emsdk/emscripten/' + branch, timeout=2400))
		factory.addStep(RunEmscriptenTestsWithSummary(name='other suite', description='other suite', command=['run_other_suite' + EXT], env=run_env, workdir='emsdk/emscripten/' + branch, timeout=2400))
		factory.addStep(RunEmscriptenTestsWithSummary(name='sockets suite - firefox stable', description='sockets suite - firefox stable', command=['run_sockets_suite_firefoxstable' + EXT], env=run_env, workdir='emsdk/emscripten/' + branch, timeout=2400, flunkOnFailure=False, warnOnFailure=True, decodeRC=warningsDict))
		factory.addStep(RunEmscriptenTestsWithSummary(name='browser suite - firefox stable', description='browser suite - firefox stable', command=['run_browser_suite_firefoxstable' + EXT], env=run_env, workdir='emsdk/emscripten/' + branch, timeout=2400))
		factory.addStep(ShellCommand(name='binaryen suite', description='binaryen suite', command=['run_binaryen_suite' + EXT], env=run_env, workdir='emsdk/binaryen/' + branch.replace('incoming', 'master'), timeout=2400))
		factory.addStep(ShellCommand(command=['release_exclusive_system_lock'], alwaysRun=True))
		c['builders'].append(BuilderConfig(name=slave_name, workernames=[bot + '-slave'], factory=factory, locks=[build_lock.access('counting')]))

	# Tag builders
	slave_name = bot + '-tagbuilder'
	run_env = { 'SLAVE_NAME': slave_name }
	factory = BuildFactory()
	factory.addStep(ShellCommand(command=['acquire_exclusive_system_lock']))
	factory.addStep(ShellCommand(name='Update', description='update emslave', command=['update_emslave' + EXT], env=run_env, haltOnFailure=True))
	factory.addStep(Git(repourl='git://github.com/kripken/emscripten.git', codebase='emscripten', workdir='emsdk/emscripten/' + branch, mode='incremental', branch=branch, haltOnFailure=True))
	factory.addStep(Git(repourl='git://github.com/kripken/emscripten-fastcomp.git', codebase='llvm', workdir='emsdk/clang/fastcomp/src/', mode='incremental', branch=branch, haltOnFailure=True))
	factory.addStep(Git(repourl='git://github.com/kripken/emscripten-fastcomp-clang.git', codebase='clang', workdir='emsdk/clang/fastcomp/src/tools/clang', mode='incremental', branch=branch, haltOnFailure=True))
	factory.addStep(ShellCommand(command=['deploy_emscripten_llvm' + ('.bat' if bot == 'win' else '.py'), '--emsdk_dir', '.', '--cmake_config', 'Release', '--deploy_llvm', '--deploy_emscripten', '--build_tag', 'latest_tag', '--delete_uploaded_files', '--delete_uploaded_build_dirs'] + deploy_args, workdir='emsdk/'))
	factory.addStep(ShellCommand(command=['release_exclusive_system_lock'], alwaysRun=True))
	c['builders'].append(BuilderConfig(name=slave_name, workernames=[bot + '-slave'], factory=factory, locks=[build_lock.access('counting')]))

	# Emsdk updaters
	slave_name = bot + '-emsdk-updater'
	run_env = { 'SLAVE_NAME': slave_name }
	factory = BuildFactory()
	factory.addStep(ShellCommand(command=['acquire_exclusive_system_lock']))
	factory.addStep(ShellCommand(name='Update', description='update emslave', command=['update_emslave' + EXT], env=run_env, haltOnFailure=True))
	factory.addStep(ShellCommand(command=['deploy_emsdk' + ('.bat' if bot == 'win' else '.py'), '--emsdk_dir', '.', '--deploy_s3', '--delete_temp_files'], workdir='emsdk/'))
	factory.addStep(ShellCommand(command=['deploy_emsdk' + ('.bat' if bot == 'win' else '.py'), '--emsdk_dir', '.', '--deploy_s3', '--delete_temp_files', '--deploy_update_package'], workdir='emsdk/'))
	factory.addStep(ShellCommand(command=['release_exclusive_system_lock'], alwaysRun=True))
	c['builders'].append(BuilderConfig(name=slave_name, workernames=[bot + '-slave'], factory=factory, locks=[build_lock.access('counting')]))

####### STATUS TARGETS

c['status'] = []
c['services'] = []

c['www'] = dict(port = buildmaster_web_gui_port,
                plugins = dict(waterfall_view={}, console_view={}),
                auth = util.UserPasswordAuth(web_gui_usernames_and_password))

c['services'].append(reporters.IRC(host='irc.mozilla.org', nick='emscripten-buildbot', channels=['emscripten'], password=irc_reporter_password, notify_events={'successToFailure': 1, 'failureToSuccess': 1}))

c['buildbotNetUsageData'] = None

####### COLLAPSE REQUESTS

# If there are multiple commits that have occurred while the previous build was in progress, 'collapse' the pushes together and only run the latest changesets (to save time, no need to build each commit)

@defer.inlineCallbacks
def collapseRequests(master, builder, req1, req2):
    "any requests with the same branch can be merged"

    # get the buildsets for each buildrequest
    selfBuildset , otherBuildset = yield defer.gatherResults([
        master.data.get(('buildsets', req1['buildsetid'])),
        master.data.get(('buildsets', req2['buildsetid']))
        ])
    selfSourcestamps = selfBuildset['sourcestamps']
    otherSourcestamps = otherBuildset['sourcestamps']

    if len(selfSourcestamps) != len(otherSourcestamps):
        defer.returnValue(False)

    for selfSourcestamp, otherSourcestamp in zip(selfSourcestamps, otherSourcestamps):
        if selfSourcestamp['branch'] != otherSourcestamp['branch']:
            defer.returnValue(False)

    defer.returnValue(True)

c['collapseRequests'] = collapseRequests

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
